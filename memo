rush00

ft_putchar.c					//ft_putchar.c 파일
----------------
#include <unistd.h>					//헤더 파일을 호출한다. <unistd.h> 유닉스 운영 체제의 기본 기능을 사용 (파이썬의 import와 같은 용도)

void	ft_putchar(char c)				//매개변수가 문자형 c 인 ft_putchar 라는 이름을 가진 값을 반환하지 않는 함수 void를 만든다.
{
	write (1, &c, 1);				//함수가 실행된다면 터미널에 c 매개변수를 출력하는데 1바이트이다.
}
----------------

main.c						//main.c 파일
----------------
#include <unistd.h>					//ft_putchar.c 의 내용과 같다 (없이도 컴파일이 정상 된다??)

void	rush(int x, int y);				//첫번째 자리에 정수형 x 와 두번째 자리에 정수형 y 매개변수인 rush 라는 이름을 가진 값을 반환하지 않는 함수 void를 만든다.

int	main(void)				//매개변수가 없는 main 함수를 정수 값을 반환하도록 만든다(컴파일된 프로그램이 실행될때 진입점(시작?)을 나타내는 함수)
{
	rush(123, 42);				//x 매개변수는 123 값을 y 매개변수는 42값을 반환하는 rush 함수를 실행한다. 
	return (0);					//프로그램이 모두 실행 후 0값을 반환하여 프로그램 종료를 알린다.
}
----------------

rush00.c						//rush00.c 파일
----------------
#include <unistd.h>

void	ft_putchar(char c);				//어떤 값도 반환하지않고 ft_putchar(char c); 함수를 실행(ft_puchar.c 로 모듈화된 파일의 내용을 실행한다)

void	rush_print(int x, int y, int i, int j)		//값을 반환하지않고 rush_print 함수를 실행한다. 매개변수는 첫째 정수 x 둘째 정수 y 셋째 정수 i 넷째 정수 j
{
	if (i == 0 || i == (y - 1))			//만약 i가 0 또는 i가 y-1 이라면? (i는 행의 증가 값을 나타낸다 그래서 행의 처음과 마지막(y-1)을 찾는다. y는 열의 값이고 -1을 준 이유는 i 초기 값을 0 으로 하기고 1씩 증가하기 때문에)
	{
		if (j == 0 || j == (x - 1))		//만약 j가 0 또는 j가 x-1 이라면? (j는 열의 증가 값을 나타낸다 그래서 열의 처음과 마지막(x-1)을 찾는다. x는 열의 값이고 -1을 준 이유는 j 초기 값을 0 으로 하기고 1씩 증가하기 때문에)
			ft_putchar('o');		//ft_putchar 함수의 매개변수에 문자 o 을 주고 함수 실행 (처음과 마지막 행의 처음과 마지막 열)
		else				//그렇지 않다면?
			ft_putchar('-');		//ft_putchar 함수의 매개변수에 문자 - 을 주고 함수 실행 (처음과 마지막 행에서 처음과 마지막 열 외의 열)
	}
	else					//그렇지 않다면? (처음과 마지막 행 외의 행)
	{
		if (j == 0 || j == (x - 1))		//만약 j가 0 또는 j가 x-1 이라면? (똑같이 열의 증가 값을 나타내 열의 처음과 마지막을 찾는다. 하지만 처음과 마지막 행 외의 행은 다른 문자를 표시한다)
			ft_putchar('|');		//ft_putchar 함수의 매개변수에 문자 l 을 주고 함수 실행(처음과 마지막 열)
		else				//그렇지 않다면?
			ft_putchar(' ');		//ft_putchar 함수의 매개변수에 공백을 주고 함수 실행(처음과 마지막 열 외의 열)
	}
}

void	rush(int x, int y)				//값을 반환하지 않는 rush 함수를 실행. 매개변수는 첫째 정수 x 둘째 정수 y
{
	int	i;				//정수형 i 변수 선언
	int	j;				//정수형 j 변수 선언

	i = 0;					//i 변수에 0을 대입
	j = 0;					//j 변수에 0을 대입
	while (i < y)				//i가 y보다 작다면 반복(행을 나타낸다)
	{
		while (j < x)			//j가 x보다 작다면 반복(열을 나타낸다)
		{
			rush_print(x, y, i, j);		//rush_print 함수를 x, y, i, j 매개변수를 대입하여 실행
			j++;			//j 변수의 값을 1 증가 (열을 x 값 횟수 만큼 반복하기 위함)
		}
		ft_putchar('\n');			//ft_putchar 함수의 매개변수에 문자 \n 을 주고 함수 실행(열 반복이 종료 되었으므로 줄바꿈)
		i++;				//i 변수의 값을 1 증가 (열 반복이 종료 되어서 다음 행으로 넘어가기 위함)
		j = 0;				//j 변수에 0을 대입 (열 반복이 종료 되므로 다시 처음 열로 돌아가기 위함)
	}
}

----------------
//rush00 행과 열을 구분하여 동작
//2중 반복으로 행을 한번 실행후 열을 반복
//첫 행과 마지막 행의 패턴이 다르며 첫 열과 마지막 열의 패턴도 다르다(각각의 꼭지점 부분과 위, 아래 모서리 부분)

rush01.c						//rush01.c 파일
----------------
#include <unistd.h>

void	ft_putchar(char c);				//

void	rush_print(int x, int y, int i, int j)
{
	if (i == 0)
	{
		if (j == 0)
			ft_putchar('/');
		else if (j == x - 1)
			ft_putchar('\\');
		else
			ft_putchar('*');
	}
	else if (i == (y - 1))
	{
		if (j == 0)
			ft_putchar('\\');
		else if (j == x - 1)
			ft_putchar('/');
		else
			ft_putchar('*');
	}
	else
	{
		if (j == 0 || j == (x - 1))
			ft_putchar('*');
		else
			ft_putchar(' ');
	}
}

void	rush(int x, int y)
{
	int	i;
	int	j;

	i = 0;
	j = 0;
	while (i < y)
	{
		while (j < x)
		{
			rush_print(x, y, i, j);
			j++;
		}
		ft_putchar('\n');
		i++;
		j = 0;
	}
}
----------------

rush02.c
----------------
#include <unistd.h>

void	ft_putchar(char c);

void	rush_print(int x, int y, int i, int j)
{
	if (i == 0)
	{
		if (j == 0 || j == (x - 1))
			ft_putchar('A');
		else
			ft_putchar('B');
	}
	else if (i == (y - 1))
	{
		if (j == 0 || j == (x - 1))
			ft_putchar('C');
		else
			ft_putchar('B');
	}
	else
	{
		if (j == 0 || j == (x - 1))
			ft_putchar('B');
		else
			ft_putchar(' ');
	}
}

void	rush(int x, int y)
{
	int	i;
	int	j;

	i = 0;
	j = 0;
	while (i < y)
	{
		while (j < x)
		{
			rush_print(x, y, i, j);
			j++;
		}
		ft_putchar('\n');
		i++;
		j = 0;
	}
}

----------------

rush03.c
----------------
#include <unistd.h>

void	ft_putchar(char c);

void	rush_print(int x, int y, int i, int j)
{
	if (i == 0 || i == (y - 1))
	{
		if (j == 0)
			ft_putchar('A');
		else if (j == x - 1)
			ft_putchar('C');
		else
			ft_putchar('B');
	}
	else
	{
		if (j == 0 || j == (x - 1))
			ft_putchar('B');
		else
			ft_putchar(' ');
	}
}

void	rush(int x, int y)
{
	int	i;
	int	j;

	i = 0;
	j = 0;
	while (i < y)
	{
		while (j < x)
		{
			rush_print(x, y, i, j);
			j++;
		}
		ft_putchar('\n');
		i++;
		j = 0;
	}
}

----------------

rush04.c
----------------
#include <unistd.h>

void	ft_putchar(char c);

void	rush_print(int x, int y, int i, int j)
{
	if (i == 0)
	{
		if (j == 0)
			ft_putchar('A');
		else if (j == x - 1)
			ft_putchar('C');
		else
			ft_putchar('B');
	}
	else if (i == (y - 1))
	{
		if (j == 0)
			ft_putchar('C');
		else if (j == x - 1)
			ft_putchar('A');
		else
			ft_putchar('B');
	}
	else
	{
		if (j == 0 || j == (x - 1))
			ft_putchar('B');
		else
			ft_putchar(' ');
	}
}

void	rush(int x, int y)
{
	int	i;
	int	j;

	i = 0;
	j = 0;
	while (i < y)
	{
		while (j < x)
		{
			rush_print(x, y, i, j);
			j++;
		}
		ft_putchar('\n');
		i++;
		j = 0;
	}
}

----------------
